name: main

on:
  workflow_call:
    inputs:
      build-artifact-name:
        required: true
        type: string
      build-artifact-path:
        required: true
        type: string
      self-build:
        required: false
        type: number
      pyodide-versions:
        required: false
        type: string
        default: "*"
      runners:
        required: false
        type: string
        default: Selenium
      browsers:
        required: false
        type: string
        default: "*"
      os:
        required: false
        type: string
        default: '[ubuntu-latest,macos-latest]'

permissions:
  contents: read

concurrency:
  group: main-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    if: inputs.self-build==1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: 3.10.2
      - uses: pre-commit/action@v2.0.3

  download-pyodide:
    runs-on: ubuntu-latest
    needs: make_test_matrix
    strategy:
      fail-fast: false
      matrix:
        pyodide-version: ${{ fromJSON(needs.make_test_matrix.outputs.pyodide_versions) }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache Pyodide
        uses: actions/cache@v3
        id: cache-pyodide
        with:
          path: pyodide-dist
          key: pyodide-${{ matrix.pyodide-version }}-${{ hashFiles('.github/**/*.yml') }}

      - name: Download Pyodide
        shell: bash -l {0}
        if: steps.cache-pyodide.outputs.cache-hit != 'true'
        run: |
          wget -q https://github.com/pyodide/pyodide/releases/download/${{ matrix.pyodide-version }}/pyodide-build-${{ matrix.pyodide-version }}.tar.bz2
          tar xjf pyodide-build-${{ matrix.pyodide-version }}.tar.bz2
          mv pyodide pyodide-dist/
  make_test_matrix:
    outputs:
      matrix: ${{ steps.filter.outputs.matrix }}
      pyodide_versions: ${{ steps.filter.outputs.pyodide_versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Write py file
        run: |
          cat << 'EOF' > filtermatrix.py
          import yaml,json

          # pyodide versions is a set of versions to test
          # as opposed to other parameters which just filter
          # the configs below
          pyodide_versions="${{ inputs.pyodide-versions}}"
          if pyodide_versions=="*":
            pyodide_versions="[0.21.0a3,0.21.0]"

          matrix=yaml.safe_load("""
            os: [ubuntu-latest]
            pyodide-version: """+pyodide_versions+"""
            test-config: [
              {runner: selenium, runtime: firefox, firefox-version: latest, geckodriver-version: latest },
              {runner: selenium, runtime: chrome, chrome-version: latest, chromedriver-version: latest },
              {runner: selenium, runtime: node, node-version: 14},
              {runner: selenium, runtime: node, node-version: 16},
              {runner: selenium, runtime: node, node-version: 18},
              {runner: selenium, runtime: firefox-no-host, firefox-version: latest, geckodriver-version: latest },
              {
                runner: selenium, runtime: chrome firefox,
                firefox-version: latest, geckodriver-version: latest,
                chrome-version: latest, chromedriver-version: latest,
              },
              {runner: selenium, runtime: host},
              # playwright browser versions are pinned to playwright version
              {runner: playwright, runtime: firefox, playwright-version: 1.22.0, node-version: 18},
              {runner: playwright, runtime: chrome, playwright-version: 1.22.0, node-version: 18},
            ]
            include:
              - os: macos-latest
                pyodide-version: 0.21.0
                test-config: {runner: selenium, runtime: safari}
              - os: macos-latest
                pyodide-version: 0.21.0
                test-config: {runner: selenium, runtime: safari, refresh: 1 }
          """)

          import itertools
          ranges={}
          for key in matrix.keys():
            if key!="include":
              ranges[key]=[]
              for v in matrix[key]:
                  ranges[key].append((key,v))

          l=list(ranges.values())

          config_list=[]
          for c in itertools.product(*l):
              dict_out={}
              for (key,v) in c:
                  dict_out[key]=v
              config_list.append(dict_out)

          if "include" in matrix:
              for c,inc_spec in enumerate(matrix["include"]):
                  config_list.append(inc_spec)

          def parse_filter(str):
            import re
            if str=="*":
              return None
            else:
              return re.findall(r'[^,\'"\[\]]+',str)

          os_filter=parse_filter("${{ inputs.os }}")
          runner_filter= parse_filter("${{inputs.runners}}")
          runtime_filter= parse_filter("${{inputs.browsers}}")

          filtered_configs=[]
          for c in config_list:
            if os_filter==None or c["os"] in os_filter:
              if runner_filter==None or c["test-config"]["runner"] in runner_filter:
                if runtime_filter==None or c["test-config"]["runtime"] in runtime_filter:
                  filtered_configs.append(c)

          # now output the full list of configurations as json
          # which can be used in the include key in a matrix
          print(f"matrix={json.dumps(filtered_configs)}")
          print(f"pyodide_versions={json.dumps(matrix['pyodide-version'])}")
          EOF
      - name: Filter matrix
        id: filter
        run: python filtermatrix.py >> $GITHUB_OUTPUT
      - name: output filter matrix
        run: echo "FilterMatrix is ${{ steps.filter.outputs.matrix }}"
  check_matrix:
    needs: make_test_matrix
    runs-on: ubuntu-latest
    steps:
      - name: show matrix
        run: echo "${{ needs.make_test_matrix.outputs.matrix }}"
  test:
    needs: [download-pyodide,make_test_matrix]
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: :99
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.make_test_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts from calling package
        if: inputs.self-build!=1
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}
      - uses: actions/setup-python@v3
        with:
          python-version: 3.10.2
      - name: Install node
        uses: actions/setup-node@v3
        if: ${{ contains(matrix.test-config.runtime, 'node') || matrix.test-config.runner == 'playwright' }}
        with:
          node-version: ${{ matrix.test-config.node-version }}

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        if: ${{ matrix.test-config.runner == 'playwright' }}
        with:
          path: .cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.test-config.playwright-version }}

      - name: Install playwright
        shell: bash -l {0}
        if: ${{ matrix.test-config.runner == 'playwright' }}
        run: |
          python3 -m pip install playwright==${{ matrix.test-config.playwright-version }}
          # TODO: install only browsers that are required
          python3 -m playwright install --with-deps

      - name: Install firefox
        uses: browser-actions/setup-firefox@latest
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'firefox') }}
        with:
          firefox-version: ${{ matrix.test-config.firefox-version }}

      - name: Install geckodriver
        uses: browser-actions/setup-geckodriver@latest
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'firefox') }}
        with:
          geckodriver-version: ${{ matrix.test-config.geckodriver-version }}

      - name: Install chrome
        uses: browser-actions/setup-chrome@latest
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'chrome') }}
        with:
          chrome-version: ${{ matrix.test-config.geckodriver-version }}

      - name: Install chromedriver
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'chrome') }}
        uses: nanasess/setup-chromedriver@v1

      - name: Enable Safari Driver
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'safari') && contains(runner.os, 'macos') }}
        run: |
          sudo safaridriver --enable
          # Only one Safari browser instance can be active at any given time
          echo "STANDALONE_REFRESH=${{ matrix.test-config.refresh }}" >> $GITHUB_ENV

      - name: Install requirements
        shell: bash -l {0}
        if: inputs.self-build==1
        run: |
          python3 -m pip install -e .
          python3 -m pip install pytest-cov
          # Currently we only install the package for dependencies.
          # We then uninstall it otherwise tests fails due to pytest hook being
          # registered twice.
          python3 -m pip uninstall -y pytest-pyodide
          which npm && npm install -g npm && npm update
          which npm && npm install node-fetch@2
      - name: Install pytest-pyodide for workflow
        shell: bash -l {0}
        if: inputs.self-build!=1
        run: |
          python3 -m pip install pytest-pyodide
          python3 -m pip install pytest-cov
          which npm && npm install -g npm && npm update
          which npm && npm install node-fetch@2
      - name: Get Pyodide from cache
        uses: actions/cache@v3
        with:
          path: pyodide-dist
          key: pyodide-${{ matrix.pyodide-version }}-${{ hashFiles('.github/**/*.yml') }}

      - name: Run tests
        shell: bash -l {0}
        run: |
          STANDALONE_REFRESH=${{ env.STANDALONE_REFRESH }} pytest -v \
            --cov=pytest_pyodide \
            --dist-dir=./pyodide-dist/ \
            --runner=${{ matrix.test-config.runner }} \
            --rt ${{ matrix.test-config.runtime }}

      - uses: codecov/codecov-action@v3
        if: ${{ github.event.repo.name == 'pyodide/pytest-pyodide' || github.event_name == 'pull_request' }}
        with:
          fail_ci_if_error: true
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment: PyPi-deploy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: 3.10.2
      - name: Install requirements and build wheel
        shell: bash -l {0}
        run: |
          python -m pip install build twine
          python -m build .
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
